#include <bits/stdc++.h> 
using namespace std;

struct Point
{
    int x, y;
};


//Найти ориентацию упорядоченного триплета(p, q, r).
// Функция возвращает следующие значения
// 0 -> p, q и r коллинеарны
// 1 -> по часовой стрелке
// 2 -> против часовой стрелки
int orientation(Point p, Point q, Point r)
{
    int K = (q.y - p.y) * (r.x - q.x) -
        (q.x - p.x) * (r.y - q.y);

    if (K == 0) return 0;
    // коллинеар 
    return (K > 0) ? 1 : 2;
    // часы или против часовой стрелки
}

// Печатает выпуклую оболочку из набора из n точек.
void convexHull(Point points[], int n)
{

    // Должно быть не менее 3 баллов
    if (n < 3) return;


    // Инициализировать результат 
    vector<Point> hull;

    // Найти крайнюю левую точку
    int l = 0;
    for (int i = 1; i < n; i++)
        if (points[i].x < points[l].x)
            l = i;


    // Начинаем с крайней левой точки, продолжаем двигаться против часовой стрелки
        // пока снова не достигнем начальной точки. Этот цикл запускает O (h)
        // время, где h - количество точек в результате или выходе.
    int p = l, q;
    do
    {

        // Добавить текущую точку к результату
        hull.push_back(points[p]);


        // Поиск точки 'q' такой, что ориентация (p, x,
                // q) против часовой стрелки для всех точек 'x'. Идея
                // отслеживать последние посещенные часы
                // мудрый пункт в д. Если любая точка «я» больше против часовой стрелки
                // мудрее чем q, тогда обновите q. 
        q = (p + 1) % n;
        for (int i = 0; i < n; i++)
        {

            // Если я больше против часовой стрелки, чем текущий q, то
            // обновляем q
            if (orientation(points[p], points[i], points[q]) == 2)
                q = i;
        }

        // Теперь q наиболее против часовой стрелки относительно p
         // Установить p как q для следующей итерации, так что q добавляется к
         // результат 'hull' 
        p = q;

    } while (p != l);
    // Пока мы не подошли к первому пункту 

    // Распечатать результат 
    for (int i = 0; i < hull.size(); i++)
        cout << "(" << hull[i].x << ", "
        << hull[i].y << ")\n";
}

// Программа драйвера для проверки вышеуказанных функций
int main()
{
    Point points[] = { {0, 3}, {2, 2}, {1, 1}, {2, 1},
                      {3, 0}, {0, 0}, {3, 3} };
    int z = sizeof(points) / sizeof(points[0]);
    convexHull(points, z);
    return 0;
}